let categories = JSON.parse(localStorage.getItem("categories")) || [];
const itemsPerPage = 5;
let currentPage = 1;

function showMessage(message, type = "success") {
  const msgBox = document.createElement("div"); // T·∫°o m·ªôt ph·∫ßn t·ª≠ div ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
  msgBox.textContent = message; // G√°n n·ªôi dung th√¥ng b√°o
  msgBox.style.position = "fixed";
  msgBox.style.top = "20px";
  msgBox.style.right = "20px";
  msgBox.style.padding = "10px 20px";
  msgBox.style.backgroundColor = 
    type === "error" ? "#e74c3c" : 
    type === "warning" ? "#f1c40f" : "#2ecc71"; // ƒê·ªïi m√†u n·ªÅn d·ª±a tr√™n lo·∫°i th√¥ng b√°o
  msgBox.style.color = "#fff";
  msgBox.style.borderRadius = "8px";
  msgBox.style.boxShadow = "0 2px 8px rgba(0,0,0,0.2)";
  msgBox.style.zIndex = 1000;
  document.body.appendChild(msgBox); // Th√™m th√¥ng b√°o v√†o body
  setTimeout(() => msgBox.remove(), 3000); // T·ª± ƒë·ªông x√≥a th√¥ng b√°o sau 3 gi√¢y
}
// L∆∞u danh m·ª•c v√†o localStorage
function saveToLocalStorage() {
  localStorage.setItem("categories", JSON.stringify(categories));
}

// C·∫≠p nh·∫≠t danh s√°ch danh m·ª•c trong <select>
function updateCategorySelect() {
  const selectCategory = document.getElementById("productCategory");
  if (!selectCategory) return; // Ki·ªÉm tra xem ph·∫ßn t·ª≠ c√≥ t·ªìn t·∫°i kh√¥ng

  selectCategory.innerHTML = ''; // X√≥a c√°c m·ª•c c≈©
  if (categories.length === 0) {
    selectCategory.innerHTML = '<option value="">Kh√¥ng c√≥ danh m·ª•c n√†o</option>';
  } else {
    categories.forEach((category) => {
      selectCategory.innerHTML += `<option value="${category.id}">${category.name}</option>`;
    });
  }
}

// Hi·ªÉn th·ªã danh m·ª•c trong b·∫£ng
function displayCategories() {
  const categoryTableBody = document.getElementById('category-table-body');
  if (!categoryTableBody) return; // Ki·ªÉm tra xem ph·∫ßn t·ª≠ c√≥ t·ªìn t·∫°i kh√¥ng

  categoryTableBody.innerHTML = ''; // X√≥a c√°c d√≤ng hi·ªán t·∫°i
  categories.forEach((category, index) => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${index + 1}</td>
      <td>${category.name}</td>
      <td>
        <button onclick="editCategory(${index})">üõ†</button>
        <button onclick="deleteCategory(${index})">üóë</button>
      </td>
    `;
    categoryTableBody.appendChild(row);
  });

  updateCategorySelect(); // C·∫≠p nh·∫≠t <select> sau khi hi·ªÉn th·ªã b·∫£ng
}

// Hi·ªÉn th·ªã danh m·ª•c ƒë√£ l·ªçc (s·ª≠a l·ªói ch·ªâ s·ªë)
function displayFilteredCategories(filteredCategories) {
  const categoryTableBody = document.getElementById('category-table-body');
  if (!categoryTableBody) return;

  categoryTableBody.innerHTML = ''; // X√≥a c√°c d√≤ng hi·ªán t·∫°i
  filteredCategories.forEach((category) => {
    const index = categories.findIndex((cat) => cat.id === category.id); // L·∫•y ch·ªâ s·ªë t·ª´ m·∫£ng g·ªëc
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${index + 1}</td>
      <td>${category.name}</td>
      <td>
        <button onclick="editCategory(${index})">üõ†</button>
        <button onclick="deleteCategory(${index})">üóë</button>
      </td>
    `;
    categoryTableBody.appendChild(row);
  });
}

// Th√™m danh m·ª•c m·ªõi
function addCategory() {
  const categoryName = document.getElementById('categoryName')?.value.trim();
  if (!categoryName) {
    showMessage("T√™n danh m·ª•c kh√¥ng h·ª£p l·ªá!", "error");
    return;
  }
  if (categories.some(category => category.name.toLowerCase() === categoryName.toLowerCase())) {
    showMessage("Danh m·ª•c ƒë√£ t·ªìn t·∫°i!", "error");
    return;
  }

  const newCategory = { id: Date.now(), name: categoryName }; // S·ª≠ d·ª•ng timestamp l√†m ID
  categories.push(newCategory);
  saveToLocalStorage();
  displayCategories();
}

// Ch·ªânh s·ª≠a danh m·ª•c
function editCategory(index) {
  const newCategoryName = prompt("Nh·∫≠p t√™n danh m·ª•c m·ªõi", categories[index].name);
  if (!newCategoryName || newCategoryName.trim() === '') {
    showMessage("T√™n danh m·ª•c kh√¥ng h·ª£p l·ªá!", "error");
    return;
  }
  if (newCategoryName !== categories[index].name && categories.some(category => category.name.toLowerCase() === newCategoryName.toLowerCase())) {
    showMessage("Danh m·ª•c ƒë√£ t·ªìn t·∫°i!", "error");
    return;
  }

  categories[index].name = newCategoryName.trim();
  saveToLocalStorage();
  displayCategories();
}

// X√≥a danh m·ª•c
function deleteCategory(index) {
  if (confirm("B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a danh m·ª•c n√†y?")) {
    categories.splice(index, 1);
    saveToLocalStorage();
    displayCategories();
  }
}

// Ch·ª©c nƒÉng t√¨m ki·∫øm
function searchData() {
  const searchValue = document.getElementById('search-input')?.value.toLowerCase() || '';
  if (searchValue === '') {
    displayCategories(); // Kh√¥i ph·ª•c danh s√°ch ƒë·∫ßy ƒë·ªß n·∫øu kh√¥ng c√≥ gi√° tr·ªã t√¨m ki·∫øm
  } else {
    const filteredCategories = categories.filter(category => category.name.toLowerCase().includes(searchValue));
    displayFilteredCategories(filteredCategories);
  }
}

// X·ª≠ l√Ω s·ª± ki·ªán g·ª≠i form
document.querySelector('.article-form')?.addEventListener('submit', function (event) {
  event.preventDefault(); // NgƒÉn h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh c·ªßa form

  // L·∫•y gi√° tr·ªã t·ª´ form
  const title = document.getElementById('title')?.value.trim();
  const category = document.getElementById('productCategory')?.value;
  const mood = document.getElementById('mood')?.value;
  const content = document.getElementById('content')?.value.trim();
  const status = document.querySelector('input[name="status"]:checked')?.value;
  const file = document.getElementById('file-upload')?.files[0];

  // Ki·ªÉm tra ƒë·∫ßu v√†o
  if (!title || !content || !category || !status) {
    showMessage( 'vui l√≤ng ƒëi·ªÅn ƒë·ªß th√¥ng tin ', "error");
    return;
  }

  // H√†m l∆∞u b√†i vi·∫øt
  function saveArticle(imageURL = '') {
    const newArticle = {
      id: Date.now(), // S·ª≠ d·ª•ng timestamp l√†m ID
      title,
      category,
      mood,
      content,
      status,
      image: imageURL, // L∆∞u base64 c·ªßa h√¨nh ·∫£nh
      date: new Date().toISOString().split('T')[0], // Ng√†y hi·ªán t·∫°i
    };

    // L·∫•y danh s√°ch b√†i vi·∫øt t·ª´ localStorage v√† th√™m b√†i vi·∫øt m·ªõi
    let articles = JSON.parse(localStorage.getItem('articles')) || [];
    articles.push(newArticle);
    localStorage.setItem('articles', JSON.stringify(articles));

    // Hi·ªÉn th·ªã th√¥ng b√°o v√† chuy·ªÉn h∆∞·ªõng
    showMessage("B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang qu·∫£n l√Ω b√†i vi·∫øt
    window.location.href = 'article_manager.html';
  }

  // X·ª≠ l√Ω t·ªáp h√¨nh ·∫£nh n·∫øu c√≥
  if (file) {
    if (!file.type.startsWith('image/')) {
      showMessage("Vui l√≤ng t·∫£i l√™n m·ªôt t·ªáp h√¨nh ·∫£nh h·ª£p l·ªá.", "error");
      return;
    }

    // Ki·ªÉm tra k√≠ch th∆∞·ªõc t·ªáp (t·ªëi ƒëa 5MB)
    if (file.size > 5 * 1024 * 1024) {
      showMessage("T·ªáp h√¨nh ·∫£nh qu√° l·ªõn. Vui l√≤ng ch·ªçn t·ªáp d∆∞·ªõi 5MB.", "error");
      return;
    }

    const reader = new FileReader();
    reader.onload = function (event) {
      const imageURL = event.target.result; // Base64 c·ªßa h√¨nh ·∫£nh
      saveArticle(imageURL); // L∆∞u b√†i vi·∫øt v·ªõi h√¨nh ·∫£nh
    };
    reader.onerror = function () {
      showMessage("l·ªói t·ªáp h√¨nh ·∫£nh!", "error");
    };
    reader.readAsDataURL(file); // ƒê·ªçc t·ªáp d∆∞·ªõi d·∫°ng base64
  } else {
    saveArticle(); // L∆∞u b√†i vi·∫øt m√† kh√¥ng c√≥ h√¨nh ·∫£nh
  }
});

// Kh·ªüi t·∫°o khi trang t·∫£i
document.addEventListener('DOMContentLoaded', function () {
  displayCategories(); // Hi·ªÉn th·ªã danh m·ª•c v√† c·∫≠p nh·∫≠t <select>
});